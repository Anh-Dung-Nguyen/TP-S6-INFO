1)
CREATE (:Lieu {name:'Triangle'})

2)
CREATE (:Lieu {name:'Beaulieu'})
CREATE (:Lieu {name:'Poterie'})

3)
MATCH (x:Lieu {name: 'Poterie'}) RETURN x
MATCH (x:Lieu) WHERE x.name = 'Poterie' RETURN x

4)
MATCH (x:Lieu) WHERE x.name = 'Triangle' SET x.rive = 'Gauche'
MATCH (x:Lieu {name: 'Triangle'}) RETURN x

5)
MATCH (x:Lieu) RETURN x

6)
MATCH (x:Lieu) WHERE x.name = 'Beaulieu' SET x.rive = 'Droite'
MATCH (x:Lieu) WHERE x.name = 'Poterie' SET x.rive = 'Gauche'
MATCH (x:Lieu) RETURN x

7)
MATCH (depart:Lieu {name:'Poterie'}), (arrivee:Lieu{name:'Triangle'})
CREATE (depart)-[:ENERGIE {calories: 725}]->(arrivee)

8)
MATCH (depart:Lieu {name:'Poterie'}), (arrivee:Lieu{name:'Beaulieu'})
CREATE (depart)-[:ENERGIE {calories: 3114}]->(arrivee)

9)
MATCH (source)-[arrete]->(cible)
RETURN source AS Sommet_Source, type(arrete) AS Nom_Arrete, arrete as
Valeur_Arrete, cible AS Sommet_Cible

10)
MATCH (x:Lieu) WHERE x.name CONTAINS 'a' RETURN x

11)
LOAD CSV WITH HEADERS FROM
'https://people.rennes.inria.fr/Laurent.Amsaleg/TP-INSA/lieux.csv' AS
row CREATE (:Lieu {id: toInteger(row.id), name: row.name, rive:
row.rive, coord: point({longitude: toFloat(row.longitude),
latitude:toFloat(row.latitude)})});

LOAD CSV WITH HEADERS FROM
'https://people.rennes.inria.fr/Laurent.Amsaleg/TP-INSA/calories.csv' AS
row MATCH (start:Lieu {id: toInteger(row.start_id)}), (end:Lieu {id:
toInteger(row.end_id)}) CREATE (start)-[:ENERGIE {calories:
toInteger(row.calories)}]->(end);

12)
MATCH (dep:Lieu {name: 'Beaulieu'}), (arr:Lieu{name: 'Poterie'})
RETURN toInteger(point.distance(dep.coord, arr.coord))

13)
MATCH (:Lieu {name: 'Saint_Anne'})-->(x) RETURN x.name

14)
MATCH (:Lieu {name: 'Saint_Anne'})<--(x) RETURN x.name

15)
MATCH (x)-->(:Lieu {name: 'Saint_Anne'})
RETURN DISTINCT x.name
UNION
MATCH (:Lieu {name: 'Saint_Anne'})-->(x)
RETURN DISTINCT x.name;

16)
MATCH (depuis:Lieu), (vers:Lieu)
RETURN depuis.name as Depuis, vers.name as Vers,
toInteger(point.distance(depuis.coord, vers.coord)) as DistMètres ORDER by
DistMètres DESC LIMIT 1

17)
MATCH p = shortestPath((depart)-[:ENERGIE*]-(arrivee))
WHERE depart.name = 'Poterie' AND arrivee.name = 'Villejean'
RETURN [n in nodes(p) | n.name] AS Trajet

18)
MATCH (dep:Lieu {name:'Villejean'})-[arrete]-(arr:Lieu{name:'Saint_Anne'})
RETURN toInteger(point.distance(dep.coord, arr.coord)) as distance,
arrete.calories as Cal

19)
MATCH (depart:Lieu {name:'Poterie'})
MATCH (arrivee:Lieu {name:'Villejean'})
MATCH p = shortestPath((depart)-[:ENERGIE*]-(arrivee))
RETURN [n in nodes(p) | n.name] AS Trajet,
REDUCE(acc = 0, r in relationships(p) | acc + r.calories) AS depense,
REDUCE(d=0.0, x IN range(1, size(nodes(p))-1) | d + toInteger
(point.distance(nodes(p)[x-1].coord, nodes(p)[x].coord))) as totalDistance

20)
MATCH (from: Lieu {name:"XXXX"}), (to: Lieu {name:"YYYY"}),
path = ((from)-[:ENERGIE*]-(to))
WITH
REDUCE(tot_cal = 0, rel in relationships(path) | tot_cal + rel.calories) AS
cout_calories, path
RETURN [n in nodes(path) | n.name] AS Trajet,
cout_calories as Dépense ORDER BY cout_calories
LIMIT 1

21)
MATCH p = shortestPath((depart)-[:ENERGIE*]-(arrivee))
WHERE all(link in relationships(p) WHERE link.calories < 1200) AND
depart.name = 'Poterie' AND arrivee.name = 'Villejean'
RETURN [n in nodes(p) | n.name] AS Trajet

22)
MATCH p = shortestPath((depart)-[:ENERGIE*]-(arrivee))
WHERE all(link in relationships(p) WHERE link.calories < 1500) AND
depart.name = 'XXXX' AND arrivee.name = 'YYYY'
RETURN [n in nodes(p) | n.name] AS Trajet

23)
LOAD CSV WITH HEADERS FROM
'https://people.rennes.inria.fr/Laurent.Amsaleg/TP-INSA/personnes.csv' AS
row CREATE (:Personne {name : row.prenom, sexe: row.sexe, age:
toInteger(row.age), profession: row.job, lieu:row.lieu});
LOAD CSV WITH HEADERS FROM
'https://people.rennes.inria.fr/Laurent.Amsaleg/TP-INSA/amis.csv' AS row
MATCH (origine : Personne { name : row.Prenom }) MATCH (cible : Personne {
name : row.Ami }) CREATE (origine)-[:AMI]->(cible);
MATCH (a:Personne) MATCH (b:Lieu {name:a.lieu})
CREATE (a)-[:HABITE]->(b);

24)
MATCH (klara:Personne {name: 'Klara'})-[:AMI]->(amis)
RETURN amis.name AS Amis_de_Klara;

25)
MATCH (klara:Personne {name: 'Klara'})-[:AMI]->(:Personne)-[:AMI]->(amis)
RETURN DISTINCT amis.name AS Amis_des_Amis_de_Klara;

26)
MATCH (klara:Personne {name: 'Klara'})-[:AMI]->(amis)-[:AMI]->(autres_amis)
WHERE (amis)-[:AMI]->(autres_amis)
RETURN DISTINCT amis.name AS Amis_Entre_Eux;

27)
MATCH p = shortestPath((klara:Personne {name: 'Klara'})-[:AMI*]-(quentin:Personne {name: 'Quentin'}))
RETURN [n IN nodes(p) | n.name] AS Trajet;

28)
LOAD CSV WITH HEADERS FROM
'https://people.rennes.inria.fr/Laurent.Amsaleg/TP-INSA/films.csv' AS row
CREATE (:Film {name : row.Titre, identif:row.ID});
LOAD CSV WITH HEADERS FROM
'https://people.rennes.inria.fr/Laurent.Amsaleg/TP-INSA/films_vus.csv' AS
row MATCH (per : Personne { name : row.Prenom }) MATCH (f : Film { identif
: row.Film_ID }) CREATE (per)-[:A_VU]->(f);

29)
MATCH (f:Film {name: 'THE BRUTALIST'})<-[:A_VU]-(per)
RETURN COUNT(per) AS Nombre_de_Vues;

30)
MATCH (f:Film {name: 'THE BRUTALIST'})<-[:A_VU]-(per)
RETURN per.name AS Personnes_Ayant_Vu_The_Brutalist;

31)
MATCH (p:Personne)
WHERE NOT EXISTS ((p)-[:A_VU]->(:Film))
RETURN p.name AS Personnes_Sans_Film;

32)
MATCH (f:Film)<-[:A_VU]-(p:Personne)
RETURN f.name AS Film, COUNT(p) AS Nombre_de_Vues
ORDER BY Nombre_de_Vues DESC
LIMIT 5;

33)
MATCH (p:Personne)-[:A_VU]->(f:Film)
RETURN p.name AS Personne, COUNT(f) AS Films_Vus
ORDER BY Films_Vus DESC
LIMIT 10;

34)
MATCH (p:Personne {name: 'Nom_de_la_personne_avec_le_plus_de_films})-[:A_VU]->(f:Film)
RETURN f.name AS Films_Vus;

MATCH (p:Personne)-[:A_VU]->(f:Film)
WITH p, COUNT(f) AS films_vus
ORDER BY films_vus DESC
LIMIT 1
MATCH (p)-[:A_VU]->(f:Film)
RETURN f.name AS Films_Vus;

35)
MATCH (klara:Personne {name: 'Klara'})-[:A_VU]->(f:Film)
RETURN f.name AS Films_Vus_Par_Klara;

36)
MATCH (klara:Personne {name: 'Klara'})-[:AMI]->(amis)-[:A_VU]->(f:Film)
RETURN DISTINCT f.name AS Films_Vus_Par_Amis_de_Klara;

37)
MATCH (f:Film {name: 'FLOW'})<-[:A_VU]-(spectateurs:Personne)
RETURN spectateurs.name AS Spectateurs_de_FLOW;

38)
MATCH (f:Film {name: 'FLOW'})<-[:A_VU]-(spectateurs:Personne)
RETURN AVG(spectateurs.age) AS Age_Moyen_Spectateurs_FLOW;

39)
MATCH (f:Film {name: 'FLOW'})<-[:A_VU]-(spectateurs:Personne)-[:HABITE]->(lieu:Lieu)
RETURN spectateurs.name AS Spectateurs, lieu.name AS Lieu;

40)
MATCH p = shortestPath((zacharie:Personne {name: 'Zacharie'})-[:AMI*]-(alice:Personne {name: 'Alice'}))
RETURN LENGTH(nodes(p)) - 1 AS Nombre_de_Personnes_A_Rencontrer, [n IN nodes(p) | n.name] AS Chemin;
